NOTES: 
the [0] is important to return dict instead of [dict]
------------------------
{
    "nodes": [
        {
            "NodeName": "Node1",
            "NodeDir": "node1_dir",
            "NodeFiles": ["file1.txt", "file2.txt"]
        },
        {
            "NodeName": "Node2",
            "NodeDir": "node2_dir",
            "NodeFiles": ["file3.txt", "file4.txt"]
        },
        {
            "NodeName": "Node3",
            "NodeDir": "node3_dir",
            "NodeFiles": ["file4.txt", "file5.txt"]
        }        
    ]
}
------------------------
data = load_json(path)

# returns the correct node base on NodeName == 1
correct_node = [node for node in data['nodes'] if node['NodeName'] == 'Node1'][0]
print(correct_node['NodeName'])

# returns a list of all 'NodeNames'
list_of_node_dirs = [a_dict['NodeName'] for a_dict in data['nodes']]
print(list_of_node_dirs)

# returns a list of nodes that are named Node1 (note change two NodeNames to 'Node1' to replicate
accepted_nodes = []
for node in data['nodes']:
	node = [node for node in data['nodes'] if node['NodeName'] == 'Node1'][0]
	accepted_nodes.append(node)
print(accepted_nodes)

# returns node that has a specific file in 'NodeFiles'
new_file_name = '4e4aa09b6d80efbd684e80f54a70c1d8605625c3380f4cb012b32644a002b5be'
correct_node = [node for node in data['nodes']
				if f'{new_file_name}.txt' in node['NodeFiles']][0]
print(correct_node['NodeName'])
	
# return all nodes that contain a file in 'NodeFiles'
list_of_nodes = []
for node in data['nodes']:
	if f'{new_file_name}.txt' in node['NodeFiles']:
		list_of_nodes.append(node['NodeName'])
print(list_of_nodes)

# delete from list of dicts based on 'NodeName'
active_nodes = [{'NodeName': 'Node1'}, {'NodeName': 'Node2'}]
active_nodes[:] = [d for d in active_nodes if d.get('NodeName') != node_name]
# different format
active_nodes['nodes'] = [d for d in active_nodes['nodes'] if d.get('NodeName') != node_name]

# adding to list of dicts and keeping change globally
for node_dict in active_nodes['nodes']:
	if file_data not in node_dict['NodeFiles']:
		node_dict['NodeFiles'].append(file_data)

# delete all of one key	
client_active_nodes = [{key: value for key, value in d.items() if key != 'NodeConn'} for d in active_nodes['nodes']]

# find min or max filtered by one key
   last_block = max(block_ledger['blocks'], key=lambda x: x['DateTimeStamp'])
